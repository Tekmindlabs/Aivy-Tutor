generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  onboarded     Boolean   @default(false)
  lastLogin     DateTime?
  phoneNumber   String?
  age           Int?
  interests     String[]
  consentDate   DateTime?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  notes         Notes[]
  tags          Tags[]
  sharedContent SharedContent[]
}


model VerificationToken {

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  message   String   
  response  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notes {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vectors   Vectors[]
}

model Tags {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Vectors {
  id          String   @id @default(cuid())
  contentType String
  contentId   String
  embedding   Float[]
  note        Notes    @relation(fields: [contentId], references: [id])
}

model SharedContent {
  id           String   @id @default(cuid())
  ownerId      String
  sharedWithId String
  contentType  String
  contentId    String
  permissions  String[]
  createdAt    DateTime @default(now())
  owner        User     @relation(fields: [ownerId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}